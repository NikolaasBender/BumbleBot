import pickle
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras


x = tf.placeholder('float')
y = tf.placeholder('float')

#image size = 1280 x 720 image size
n_nodes_hl1 = 500
n_nodes_hl2 = 500
n_nodes_hl3 = 500
n_nodes_hl4 = 500
n_nodes_hl5 = 500
n_nodes_hl6 = 500

#================================================
#LAYERS
#================================================
hidden_1_layer = {'f_fum':n_nodes_hl1,
                  'weight':tf.Variable(tf.random_normal([921600, n_nodes_hl1])),
                  'bias':tf.Variable(tf.random_normal([n_nodes_hl1]))}

hidden_2_layer = {'f_fum':n_nodes_hl2,
                  'weight':tf.Variable(tf.random_normal([n_nodes_hl1, n_nodes_hl2])),
                  'bias':tf.Variable(tf.random_normal([n_nodes_hl2]))}

hidden_3_layer = {'f_fum':n_nodes_hl,
                  'weight':tf.Variable(tf.random_normal([n_nodes_hl2, n_nodes_hl3])),
                  'bias':tf.Variable(tf.random_normal([n_nodes_hl3]))}

hidden_4_layer = {'f_fum':n_nodes_hl,
                  'weight':tf.Variable(tf.random_normal([n_nodes_hl3, n_nodes_hl4])),
                  'bias':tf.Variable(tf.random_normal([n_nodes_hl4]))}

hidden_5_layer = {'f_fum':n_nodes_hl,
                  'weight':tf.Variable(tf.random_normal([n_nodes_hl4, n_nodes_hl5])),
                  'bias':tf.Variable(tf.random_normal([n_nodes_hl5]))}

hidden_6_layer = {'f_fum':n_nodes_hl,
                  'weight':tf.Variable(tf.random_normal([n_nodes_hl5, n_nodes_hl6])),
                  'bias':tf.Variable(tf.random_normal([n_nodes_hl6]))}

output_layer = {'f_fum':None,
                'weight':tf.Variable(tf.random_normal([n_nodes_hl6, n_classes])),
                'bias':tf.Variable(tf.random_normal([n_classes])),}




#================================================
#GETING THE MODEL GOING
#================================================
def neural_network_model(data):
    l1 = tf.add(tf.matmul(data, hidden_1_layer['weight']), hidden_1_layer['bias'])
    l1 = tf.nn.relu(l1)
    l2 = tf.add(tf.matmul(l1, hidden_2_layer['weight']), hidden_2_layer['bias'])
    l2 = tf.nn.relu(l2)
    l3 = tf.add(tf.matmul(l2, hidden_3_layer['weight']), hidden_3_layer['bias'])
    l3 = tf.nn.relu(l3)
    l4 = tf.add(tf.matmul(l3, hidden_4_layer['weight']), hidden_4_layer['bias'])
    l4 = tf.nn.relu(l4)
    l5 = tf.add(tf.matmul(l4, hidden_5_layer['weight']), hidden_5_layer['bias'])
    l5 = tf.nn.relu(l5)
    l6 = tf.add(tf.matmul(l5, hidden_6_layer['weight']), hidden_6_layer['bias'])
    l6 = tf.nn.relu(l6)
    output = tf.matmul(l6, output_layer['weight']) + output_layer['bias']
    return output






saver = tf.train.Saver()







def train_neural_net(x):
	prediction = neural_network_model(x)

	cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=prediction, labels=y))

	#CAN ADJUST LEARNING RATE TOO -- MAYBE DO IN THE FUTURE
	optimizer = tf.train.AdamOptimizer().minimize(cost)

	#CYCLES OF FEED FORWARDS + BACK PROP
	epochs = 10

	with tf.Session() as ses:
		ses.run(tf.initialize_all_variables())

		#THIS IS TRAINING THE NETWORK
		for e in range(0,epochs):
			epoch_loss = 0
			for _ in range(int(mnist.train.num_examples/batch_size)):
				epoch_x, epoch_y = mnist.train.next_batch(batch_size)
				_, c = ses.run([optimizer, cost], feed_dict = {x:epoch_x, y: epoch_y})

				epoch_loss += c

			print("epoch: ", e, " completed out of ", epochs, " loss: ", epoch_loss)



		#HERE WE RUN IT THROUGH THE MODEL AND EVALUATE IT
		corret = tf.equal(tf.argmax(prediction,1), tf.argmax(y,1))

		accuracy = tf.reduce_mean(tf.cast(corret,'float'))

		print("accuracy: ", accuracy.eval({x: mnist.test.images, y: mnist.test.labels}))
